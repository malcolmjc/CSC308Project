/// <reference types="node" />
declare module "Protocol" {
    export enum Protocol {
        USER_ID = 1,
        JOIN_ROOM = 10,
        JOIN_ERROR = 11,
        LEAVE_ROOM = 12,
        ROOM_DATA = 13,
        ROOM_STATE = 14,
        ROOM_STATE_PATCH = 15,
        BAD_REQUEST = 50,
    }
}
declare module "Connection" {
    import WebSocketClient from "@gamestdio/websocket";
    export class Connection extends WebSocketClient {
        private _enqueuedCalls;
        constructor(url: any, query?: any);
        onOpenCallback(event: any): void;
        send(data: any): void;
    }
}
declare module "Room" {
    import { Signal } from "signals.js";
    import Clock = require("@gamestdio/clock");
    import { DeltaContainer } from "delta-listener";
    import { Connection } from "Connection";
    export class Room<T = any> extends DeltaContainer<T & any> {
        id: number;
        name: string;
        sessionId: string;
        clock: Clock;
        remoteClock: Clock;
        onJoin: Signal;
        onUpdate: Signal;
        onData: Signal;
        onError: Signal;
        onLeave: Signal;
        ping: number;
        private lastPatchTime;
        connection: Connection;
        private _previousState;
        constructor(name: string);
        connect(connection: Connection): void;
        protected onMessageCallback(event: any): void;
        setState(encodedState: Buffer, remoteCurrentTime?: number, remoteElapsedTime?: number): void;
        patch(binaryPatch: any): void;
        leave(): void;
        send(data: any): void;
        removeAllListeners(): void;
    }
}
declare module "Client" {
    import { Signal } from "signals.js";
    import { Room } from "Room";
    import { Connection } from "Connection";
    export class Client {
        id?: string;
        onOpen: Signal;
        onMessage: Signal;
        onClose: Signal;
        onError: Signal;
        protected connection: Connection;
        protected rooms: {
            [id: string]: Room;
        };
        protected connectingRooms: {
            [id: string]: Room;
        };
        protected joinRequestId: number;
        protected hostname: string;
        protected storage: Storage;
        constructor(url: string);
        protected createConnection(colyseusid: string): void;
        join<T>(roomName: string, options?: any): Room<T>;
        /**
         * @override
         */
        protected onMessageCallback(event: any): void;
    }
}
declare module "index" {
    export { Client } from "Client";
    export { Protocol } from "Protocol";
    export { Room } from "Room";
    export { DataChange } from "delta-listener";
}
