"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var msgpack = require("notepack.io");
var signals_js_1 = require("signals.js");
var Protocol_1 = require("./Protocol");
var Room_1 = require("./Room");
var Connection_1 = require("./Connection");
var Client = /** @class */ (function () {
    function Client(url) {
        var _this = this;
        // signals
        this.onOpen = new signals_js_1.Signal();
        this.onMessage = new signals_js_1.Signal();
        this.onClose = new signals_js_1.Signal();
        this.onError = new signals_js_1.Signal();
        this.rooms = {};
        this.connectingRooms = {};
        this.joinRequestId = 0;
        this.storage = window.localStorage;
        this.hostname = url;
        var colyseusid = this.storage.getItem('colyseusid');
        if (typeof (Promise) === "undefined" || // old browsers
            !(colyseusid instanceof Promise)) {
            // browser has synchronous return
            this.createConnection(colyseusid);
        }
        else {
            // react-native is asynchronous
            colyseusid.then(function (id) { return _this.createConnection(id); });
        }
    }
    Client.prototype.createConnection = function (colyseusid) {
        var _this = this;
        this.id = colyseusid || "";
        this.connection = new Connection_1.Connection(this.hostname + "/?colyseusid=" + this.id);
        this.connection.onmessage = this.onMessageCallback.bind(this);
        this.connection.onclose = function (e) { return _this.onClose.dispatch(); };
        this.connection.onerror = function (e) { return _this.onError.dispatch(); };
        // check for id on cookie
        this.connection.onopen = function () {
            if (_this.id) {
                _this.onOpen.dispatch();
            }
        };
    };
    Client.prototype.join = function (roomName, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        options.requestId = ++this.joinRequestId;
        var room = new Room_1.Room(roomName);
        // remove references on leaving
        room.onLeave.addOnce(function () {
            delete _this.rooms[room.id];
            delete _this.connectingRooms[options.requestId];
        });
        this.connectingRooms[options.requestId] = room;
        this.connection.send([Protocol_1.Protocol.JOIN_ROOM, roomName, options]);
        return room;
    };
    /**
     * @override
     */
    Client.prototype.onMessageCallback = function (event) {
        var message = msgpack.decode(new Uint8Array(event.data));
        var code = message[0];
        if (code == Protocol_1.Protocol.USER_ID) {
            this.storage.setItem('colyseusid', message[1]);
            this.id = message[1];
            this.onOpen.dispatch();
        }
        else if (code == Protocol_1.Protocol.JOIN_ROOM) {
            var requestId = message[2];
            var room = this.connectingRooms[requestId];
            if (!room) {
                console.warn("colyseus.js: client left room before receiving session id.");
                return;
            }
            this.rooms[room.id] = room;
            room.id = message[1];
            room.connect(new Connection_1.Connection(this.hostname + "/" + room.id + "?colyseusid=" + this.id));
            delete this.connectingRooms[requestId];
        }
        else if (code == Protocol_1.Protocol.JOIN_ERROR) {
            console.error("colyseus.js: server error:", message[2]);
            // general error
            this.onError.dispatch(message[2]);
        }
        else {
            this.onMessage.dispatch(message);
        }
    };
    return Client;
}());
exports.Client = Client;
