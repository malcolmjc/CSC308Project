var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Use codes between 0~127 for lesser throughput (1 byte)
define("Protocol", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Protocol;
    (function (Protocol) {
        // User-related (0~10)
        Protocol[Protocol["USER_ID"] = 1] = "USER_ID";
        // Room-related (10~20)
        Protocol[Protocol["JOIN_ROOM"] = 10] = "JOIN_ROOM";
        Protocol[Protocol["JOIN_ERROR"] = 11] = "JOIN_ERROR";
        Protocol[Protocol["LEAVE_ROOM"] = 12] = "LEAVE_ROOM";
        Protocol[Protocol["ROOM_DATA"] = 13] = "ROOM_DATA";
        Protocol[Protocol["ROOM_STATE"] = 14] = "ROOM_STATE";
        Protocol[Protocol["ROOM_STATE_PATCH"] = 15] = "ROOM_STATE_PATCH";
        // Generic messages (50~60)
        Protocol[Protocol["BAD_REQUEST"] = 50] = "BAD_REQUEST";
    })(Protocol = exports.Protocol || (exports.Protocol = {}));
});
define("Connection", ["require", "exports", "@gamestdio/websocket", "notepack.io"], function (require, exports, websocket_1, msgpack) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Connection = /** @class */ (function (_super) {
        __extends(Connection, _super);
        function Connection(url, query) {
            if (query === void 0) { query = {}; }
            var _this = _super.call(this, url) || this;
            _this._enqueuedCalls = [];
            _this.binaryType = "arraybuffer";
            return _this;
        }
        Connection.prototype.onOpenCallback = function (event) {
            _super.prototype.onOpenCallback.call(this);
            if (this._enqueuedCalls.length > 0) {
                for (var i = 0; i < this._enqueuedCalls.length; i++) {
                    var _a = this._enqueuedCalls[i], method = _a[0], args = _a[1];
                    this[method].apply(this, args);
                }
            }
        };
        Connection.prototype.send = function (data) {
            if (this.ws.readyState == WebSocket.OPEN) {
                return _super.prototype.send.call(this, msgpack.encode(data));
            }
            else {
                console.warn("colyseus.js: trying to send data while in " + this.ws.readyState + " state");
                // WebSocket not connected.
                // Enqueue data to be sent when readyState == OPEN
                this._enqueuedCalls.push(['send', [data]]);
            }
        };
        return Connection;
    }(websocket_1.default));
    exports.Connection = Connection;
});
define("Room", ["require", "exports", "signals.js", "@gamestdio/clock", "delta-listener", "notepack.io", "fossil-delta", "Protocol"], function (require, exports, signals_js_1, Clock, delta_listener_1, msgpack, fossilDelta, Protocol_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Room = /** @class */ (function (_super) {
        __extends(Room, _super);
        function Room(name) {
            var _this = _super.call(this, {}) || this;
            _this.clock = new Clock(); // experimental
            _this.remoteClock = new Clock(); // experimental
            // Public signals
            _this.onJoin = new signals_js_1.Signal();
            _this.onUpdate = new signals_js_1.Signal();
            _this.onData = new signals_js_1.Signal();
            _this.onError = new signals_js_1.Signal();
            _this.onLeave = new signals_js_1.Signal();
            _this.id = null;
            _this.name = name;
            _this.onLeave.add(function () { return _this.removeAllListeners(); });
            return _this;
        }
        Room.prototype.connect = function (connection) {
            var _this = this;
            this.connection = connection;
            this.connection.onmessage = this.onMessageCallback.bind(this);
            this.connection.onclose = function (e) { return _this.onLeave.dispatch(e); };
        };
        Room.prototype.onMessageCallback = function (event) {
            var message = msgpack.decode(new Uint8Array(event.data));
            var code = message[0];
            if (code == Protocol_1.Protocol.JOIN_ROOM) {
                this.sessionId = message[1];
                this.onJoin.dispatch();
            }
            else if (code == Protocol_1.Protocol.JOIN_ERROR) {
                this.onError.dispatch(message[2]);
            }
            else if (code == Protocol_1.Protocol.ROOM_STATE) {
                var state = message[2];
                var remoteCurrentTime = message[3];
                var remoteElapsedTime = message[4];
                this.setState(state, remoteCurrentTime, remoteElapsedTime);
            }
            else if (code == Protocol_1.Protocol.ROOM_STATE_PATCH) {
                this.patch(message[2]);
            }
            else if (code == Protocol_1.Protocol.ROOM_DATA) {
                this.onData.dispatch(message[2]);
            }
            else if (code == Protocol_1.Protocol.LEAVE_ROOM) {
                this.leave();
            }
        };
        Room.prototype.setState = function (encodedState, remoteCurrentTime, remoteElapsedTime) {
            var state = msgpack.decode(encodedState);
            this.set(state);
            this._previousState = new Uint8Array(encodedState);
            // set remote clock properties
            if (remoteCurrentTime && remoteElapsedTime) {
                this.remoteClock.currentTime = remoteCurrentTime;
                this.remoteClock.elapsedTime = remoteElapsedTime;
            }
            this.clock.start();
            this.onUpdate.dispatch(state);
        };
        Room.prototype.patch = function (binaryPatch) {
            //
            // calculate client-side ping
            //
            var patchTime = Date.now();
            if (this.lastPatchTime) {
                this.ping = patchTime - this.lastPatchTime;
            }
            this.lastPatchTime = patchTime;
            this.clock.tick();
            // apply patch
            this._previousState = Buffer.from(fossilDelta.apply(this._previousState, binaryPatch));
            // trigger state callbacks
            this.set(msgpack.decode(this._previousState));
            this.onUpdate.dispatch(this.data);
        };
        Room.prototype.leave = function () {
            if (this.id) {
                this.connection.close();
            }
        };
        Room.prototype.send = function (data) {
            this.connection.send([Protocol_1.Protocol.ROOM_DATA, this.id, data]);
        };
        Room.prototype.removeAllListeners = function () {
            _super.prototype.removeAllListeners.call(this);
            this.onJoin.removeAll();
            this.onUpdate.removeAll();
            this.onData.removeAll();
            this.onError.removeAll();
            this.onLeave.removeAll();
        };
        return Room;
    }(delta_listener_1.DeltaContainer));
    exports.Room = Room;
});
define("Client", ["require", "exports", "notepack.io", "signals.js", "Protocol", "Room", "Connection"], function (require, exports, msgpack, signals_js_2, Protocol_2, Room_1, Connection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Client = /** @class */ (function () {
        function Client(url) {
            var _this = this;
            // signals
            this.onOpen = new signals_js_2.Signal();
            this.onMessage = new signals_js_2.Signal();
            this.onClose = new signals_js_2.Signal();
            this.onError = new signals_js_2.Signal();
            this.rooms = {};
            this.connectingRooms = {};
            this.joinRequestId = 0;
            this.storage = window.localStorage;
            this.hostname = url;
            var colyseusid = this.storage.getItem('colyseusid');
            if (!(colyseusid instanceof Promise)) {
                // browser has synchronous return
                this.createConnection(colyseusid);
            }
            else {
                // react-native is asynchronous
                colyseusid.then(function (id) { return _this.createConnection(id); });
            }
        }
        Client.prototype.createConnection = function (colyseusid) {
            var _this = this;
            this.id = colyseusid || "";
            this.connection = new Connection_1.Connection(this.hostname + "/?colyseusid=" + this.id);
            this.connection.onmessage = this.onMessageCallback.bind(this);
            this.connection.onclose = function (e) { return _this.onClose.dispatch(); };
            this.connection.onerror = function (e) { return _this.onError.dispatch(); };
            // check for id on cookie
            this.connection.onopen = function () {
                if (_this.id) {
                    _this.onOpen.dispatch();
                }
            };
        };
        Client.prototype.join = function (roomName, options) {
            if (options === void 0) { options = {}; }
            options.requestId = ++this.joinRequestId;
            this.connectingRooms[options.requestId] = new Room_1.Room(roomName);
            this.connection.send([Protocol_2.Protocol.JOIN_ROOM, roomName, options]);
            return this.connectingRooms[options.requestId];
        };
        /**
         * @override
         */
        Client.prototype.onMessageCallback = function (event) {
            var _this = this;
            var message = msgpack.decode(new Uint8Array(event.data));
            var code = message[0];
            if (code == Protocol_2.Protocol.USER_ID) {
                this.storage.setItem('colyseusid', message[1]);
                this.id = message[1];
                this.onOpen.dispatch();
            }
            else if (code == Protocol_2.Protocol.JOIN_ROOM) {
                var requestId = message[2];
                var room_1 = this.connectingRooms[requestId];
                this.rooms[room_1.id] = room_1;
                room_1.id = message[1];
                room_1.connect(new Connection_1.Connection(this.hostname + "/" + room_1.id + "?colyseusid=" + this.id));
                room_1.onLeave.add(function () { return delete _this.rooms[room_1.id]; });
                delete this.connectingRooms[requestId];
            }
            else if (code == Protocol_2.Protocol.JOIN_ERROR) {
                console.error("server error:", message[2]);
                // general error
                this.onError.dispatch(message[2]);
            }
            else {
                this.onMessage.dispatch(message);
            }
        };
        return Client;
    }());
    exports.Client = Client;
});
define("index", ["require", "exports", "Client", "Protocol", "Room", "delta-listener"], function (require, exports, Client_1, Protocol_3, Room_2, delta_listener_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = Client_1.Client;
    exports.Protocol = Protocol_3.Protocol;
    exports.Room = Room_2.Room;
    exports.DataChange = delta_listener_2.DataChange;
});
